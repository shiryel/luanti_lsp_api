---@meta
---Authentication
-----------------

---@alias mt.PrivsSet { [string]: boolean|nil }

--- * Converts string representation of privs into table form
--- * `delim`: String separating the privs. Defaults to `","`.
--- * Returns `{ priv1 = true, ... }`
---@param str string String to convert.
---@param delim? string String separating the privs. Defaults to `","`.
---@return mt.PrivsSet # `{ priv1 = true, ... }`
function core.string_to_privs(str, delim) end


--- * Returns the string representation of `privs`
--- * `delim`: String to delimit privs. Defaults to `","`.
---@param privs mt.PrivsSet `{ priv1 = true, ... }`
---@param delim? string String to delimit privs. Defaults to `","`.
---@return string
function core.privs_to_string(privs, delim) end


--- 
---@param name string
---@return mt.PrivsSet # `{ priv1 = true, ... }`
---@see mt.AuthHandlerDef
function core.get_player_privs(name) end


--- Returns `bool, missing_privs`
--- * A quickhand for checking privileges.
--- * `player_or_name`: Either a Player object or the name of a player.
--- * `...` is either a list of strings, e.g. `"priva", "privb"` or
--- a table, e.g. `{ priva = true, privb = true }`.
---@param player_or_name mt.PlayerObjectRef|string
---@param ... string
---@return boolean
---@return string[]?
---@overload fun(player_or_name: mt.PlayerObjectRef|string, privs: mt.PrivsSet): boolean?, string[]?
function core.check_player_privs(player_or_name, ...) end


--- * Returns true if the "password entry" for a player with name matches given
--- password, false otherwise.
--- * The "password entry" is the password representation generated by the
--- engine as returned as part of a `get_auth()` call on the auth handler.
--- * Only use this function for making it possible to log in via password from
--- external protocols such as IRC, other uses are frowned upon.
---@param name string
---@param entry string
---@param password string
---@return boolean
function core.check_password_entry(name, entry, password) end


--- * Convert a name-password pair to a password hash that Luanti can use.
--- * The returned value alone is not a good basis for password checks based
--- on comparing the password hash in the database with the password hash
--- from the function, with an externally provided password, as the hash
--- in the db might use the new SRP verifier format.
--- * For this purpose, use `core.check_password_entry` instead.
---@see core.check_password_entry
---@param name string
---@param raw_password string
---@return string
function core.get_password_hash(name, raw_password) end


--- Returns an IP address string for the player
--- `name`.
--- * The player needs to be online for this to be successful.
---@param name string player name
---@return string # An IP address string for the player.
function core.get_player_ip(name) end


--- Return the currently active auth handler
--- * Must be called *after* load time, to ensure that any custom auth handler was
--- already registered.
--- * See the [Authentication handler definition]
--- * Use this to e.g. get the authentication data for a player:
--- `local auth_data = core.get_auth_handler().get_auth(playername)`
---@return mt.AuthHandlerDef # currently active auth handler
function core.get_auth_handler() end


--- * Must be called by the authentication handler for privilege changes.
--- * `name`: string; if omitted, all auth data should be considered modified
---@param name string; if omitted, all auth data should be considered modified
---@see mt.AuthHandlerDef
function core.notify_authentication_modified(name) end


--- Set password hash of
--- player `name`.
---@param name string
---@param password_hash string
---@see mt.AuthHandlerDef
function core.set_player_password(name, password_hash) end


--- Set privileges of player `name`.
--- * `privs` is a **set** of privileges:
--- A table where the keys are names of privileges and the values are `true`.
--- * Example: `core.set_player_privs("singleplayer", {interact = true, fly = true})`.
--- This **sets** the player privileges to `interact` and `fly`;
--- `singleplayer` will only have these two privileges afterwards.
---@param name string
---@param privs mt.PrivsSet
---@see mt.AuthHandlerDef
function core.set_player_privs(name, privs) end


--- Helper to grant or revoke privileges.
--- * `changes`: Table of changes to make.
--- A field `[privname] = true` grants a privilege,
--- whereas `[privname] = false` revokes a privilege.
--- * Example: `core.change_player_privs("singleplayer", {interact = true, fly = false})`
--- will grant singleplayer the `interact` privilege
--- and revoke singleplayer's `fly` privilege.
--- All other privileges will remain unchanged.
---@param name string
---@param changes mt.PrivsSet[]
function core.change_player_privs(name, changes) end


--- * See `reload()` in authentication handler definition
---@see mt.AuthHandlerDef
function core.auth_reload() end