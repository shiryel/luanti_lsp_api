---@meta
---Item definition
------------------

-- Used by `core.register_node`, `core.register_craftitem`, and
-- `core.register_tool`.
---Item's description.
---
---Can contain new lines. `"\n"` has to be used as new line character.
---Short item description.
---
---Must not contain new lines.
---
---Default: `nil`
---Item groups.
---
---key = name, value = rating; rating = 1..3.
---
---If rating not applicable, use 1.
---
---* `{wool = 1, fluffy = 3}`
---* `{soil = 2, outerspace = 1, crumbly = 1}`
---* `{bendy = 2, snappy = 1}`
---* `{hard = 1, metal = 1, spikes = 1}`
---Item inventory texture.
---An overlay to the inventory texture which does not get colorized.
---Item wielded texture.
---An overlay to the wielded texture which does not get colorized.
---An texture containing the palette of an item.
---
---You can set the currently used color as the `"palette_index"` field of the item stack metadata.
---
---The palette is always stretched to fit indices between `0` and `255`, to ensure compatibility with `"colorfacedir"` and `"colorwallmounted"` nodes.
---The color of the item. The palette overrides this.
---The scale the item will have in the player hand.
---How much items can be stacked together.
---
---The default value of `99` may be configured by users using the setting `"default_stack_max"`.
---How far will the player be able to aim with this node as hand.
---If true, item points to all liquid nodes (`liquidtype ~= "none"`), even those for which `pointable = false`.
---* **When used for nodes:** Defines amount of light emitted by node.
---* **Otherwise:** Defines texture glow when viewed as a dropped item
---
---To set the maximum (`14`), use the value `core.LIGHT_MAX`.
---
---A value outside the range `0` to `core.LIGHT_MAX` causes undefined behavior.
---
---Default: `0`
---Define the tool capabilities.
---Define client-side placement prediction.
---
---* If `nil` and item is node, prediction is made automatically.
---* If `nil` and item is not a node, no prediction is made.
---* If `""` and item is anything, no prediction is made.
---
---Otherwise should be name of node which the client immediately places on ground when the player places the item.
---
---Server will always update actual result shortly.
---Define client-side dig prediction.
---
---* If `""`, no prediction is made.
---* If `"air"`, node is removed.
---
---Otherwise should be name of node which the client immediately place upon digging.
---
---Server will always update actual result shortly.
---
---Default: `""`
---Definition of items sounds to be played at various events.
---
---All fields in this table are optional.
---
---* `breaks`: When tool breaks due to wear. Ignored for non-tools.
---* `eat`: When item is eaten with `core.do_item_eat`.
---When the `place` key was pressed with the item in hand and a node was pointed at.
---
---Shall place item and return the leftover `itemstack` or `nil` to not modify the inventory.
---
---The placer may be any `ObjectRef` or `nil`.
---
---default: `core.item_place`
---Same as `on_place` but called when not pointing at a node.
---
---Function must return either `nil` if inventory shall not be modified, or an `itemstack` to replace the original `itemstack`.
---
---The user may be any `ObjectRef` or `nil`.
---
---default: `nil`
-- Called when a dropped item is punched by a player.
--
-- Shall pick-up the item and return the leftover itemstack or nil to not
-- modify the dropped item.
--
-- default: `core.item_pickup`
---Shall drop item and return the leftover `itemstack`.
---
---The dropper may be any `ObjectRef` or `nil`.
---
---default: `core.item_drop`
---When user pressed the `punch/mine` key with the item in hand.
---
---Function must return either `nil` if inventory shall not be modified, or an `itemstack` to replace the original `itemstack`.
---
---e.g.:
---```lua
---itemstack:take_item(); return itemstack
---```
---
---Otherwise, the function is free to do what it wants.
---
---The user may be any `ObjectRef` or `nil`.
---
---The default functions handle regular use cases.
---
---default: `nil`
---If defined, should return an itemstack and will be called instead of wearing out the item (if tool).
---
---If returns `nil`, does nothing.
---
---If after_use doesn't exist, it is the same as:
---```lua
---function(itemstack, user, node, digparams)
---    itemstack:add_wear(digparams.wear)
---    return itemstack
---end
---```
---
---The user may be any `ObjectRef` or `nil`.
---@class mt.ItemDef
---@field name string|nil
---@field type string|nil
---@field description string|nil
---@field short_description string|nil
---@field groups mt.ObjectGroups|nil
---@field inventory_image string|nil
---@field inventory_overlay string|nil
---@field wield_image string|nil
---@field wield_overlay string|nil
---@field palette string|nil
---@field color mt.ColorSpec|nil
---@field wield_scale mt.Vector|nil
---@field stack_max integer|nil
---@field range number|nil
---@field liquids_pointable boolean|nil
---@field light_source integer|nil
---@field tool_capabilities mt.ToolCaps|nil
---@field node_placement_prediction string|nil
---@field node_dig_prediction string|nil
---@field sound {breaks: mt.SimpleSoundSpec, eat: mt.SimpleSoundSpec}|nil
---@field on_place nil|fun(itemstack: mt.ItemStack, placer?: mt.ObjectRef, pointed_thing: mt.PointedThing): mt.ItemStack?
---@field on_secondary_use nil|fun(itemstack: mt.ItemStack, placer?: mt.ObjectRef, pointed_thing: mt.PointedThing): mt.ItemStack?
---@field on_pickup nil|fun(itemstack: mt.ItemStack, picker?: mt.ObjectRef, pointed_thing?: mt.PointedThing, time_from_last_punch?: number, ...?: any): mt.ItemStack?
---@field on_drop nil|fun(itemstack: mt.ItemStack, dropper?: mt.ObjectRef, pos: mt.Vector): mt.ItemStack?
---@field on_use nil|fun(itemstack: mt.ItemStack, user?: mt.ObjectRef, pointed_thing: mt.PointedThing): mt.ItemStack?
---@field after_use nil|fun(itemstack: mt.ItemStack, user?: mt.ObjectRef, node: mt.Node, digparams: unknown): mt.ItemStack?